1. Element vs components
it's a plain object describing what you want to see regarding the DOM nodes on the screen.
React elements are not actual DOM elements but provide an object representation of a DOM node.
React elements are immutable, meaning once you create an element, you can't change its children or attributes.
An element is created using React.createElement() or JSX, a syntax extension for JavaScript.

Components are the building blocks of any React application,
allowing developers to break down the UI into reusable, manageable pieces. 
Each component encapsulates its structure, behavior, and state, making it possible to create complex applications with simple, 
isolated code units.

=========
PureComponent is similar to Component but it skips re-renders for same props and state.
with same input i will give same output

==========
refs is uncontrolled
with dom we can manipulate

==========
forwardRef lets your child component expose a DOM node to parent component with a ref.

==========
interceptors 
basically we intercept the api request and response before going to backend and coming response to us

==========
React Fiber is used to render a system faster and smoother.
Fiber focuses on animations and responsiveness
It has the ability to split work into chunks and prioritize tasks.

============ 
how to manage nested routes in terms of roles based routing
we can save data in redux and check in the router main file 

=== when we hit localhost 300 ==
we pass create root element to index file and there we have render method 
that mount project on DOM 
and then it's maintain virtual DOM

=========
we use babel transpiler to convert jsx to simple html
in class we have render method to return jsx but in functional we directly return jsx
simpler and more flexible with hooks we can easily manage state, handle side effects, 
Functional components are more performant than class components. below is the reason
class > function > render 
functional > render

===== how data flow in react ===
react is unidirectional 
parent to child data flow 

=== error boundary for components ===
  static getDerivedStateFromError(error) {
    // Update state so the next render will show the fallback UI.
    return { hasError: true };
  }
   componentDidCatch(error, info) {
    // Example "componentStack":
    //   in ComponentThatThrows (created by App)
    //   in ErrorBoundary (created by App)
    //   in div (created by App)
    //   in App
    logErrorToMyService(error, info.componentStack);
  }

  ============
  in promise finally does not change or update any flow it's just execute

  e.g:
  const promise = new Promise(res => res(2));
  promise.then(v => {
      console.log(v);  // logs 2
      return v * 2;    // returns 4
  }).then(v => {
      console.log(v);  // logs 4
      return v * 2;    // returns 8
  }).finally(v => {
      console.log(v);  // logs undefined
      return v * 2;    // has no effect on the next .then, v is undefined
  }).then(v => {
      console.log(v);  // logs 8
  });

  ==================
  we can pass value, function and component as well from customHooks

  ==========
  propagation have three phases
  Capturing (window to target)
  bubbling (target to window)
  Target 
with the third argument we can change bubbling into Capturing (true)
stopPropagation to stop both kind of propagation 

  ============

  how to call all three service at same time 

  answer:
async function getData(){
    const url1 = //...
    const url2 = //...

    const response1 = await fetch(url1)
    const data1 = await response1.json()

    const response2 = await fetch(url2)
    const data2 = await response1.json()

    // do what you want with data1 and data2 here

    
}

This works great the only downside is the await keyword pauses the function so the second request won't happen till the first one finishes.

solution of above point is Promise.all()

async function getData(){
    const url1 = //...
    const url2 = //...

    const responses = await Promise.all([fetch(url1), fetch(url2)])

    const data1 = await responses[0].json()
    const data2 = await responses[1].json()

    // do what you want with data1 and data2 here
}

getData()


==== 
q:what are render props 
A:when we send a prop from child to parent then we use the value to make some some changes in either parent component or any other children component 
=======

<label>Your Image File
  <input type="file" name="myImage" accept="image/png, image/gif, image/jpeg" />
</label>

